# AURA Voice AI - Docker Compose
# Phase 3: Added PostgreSQL for long-term storage

version: '3.8'

services:
  backend:
    build: ./backend
    container_name: aura-backend
    ports:
      - "8000:8000"
    environment:
      - GROK_API_KEY=${GROK_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - ELEVENLABS_VOICE_ID=${ELEVENLABS_VOICE_ID}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://aura:aura_pass@postgres:5432/aura_db
    volumes:
      - ./backend:/app
      - knowledge_data:/app/data/knowledge_base
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      - redis
      - postgres
    networks:
      - aura-network
  
  redis:
    image: redis:7-alpine
    container_name: aura-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - aura-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
  
  postgres:
    image: postgres:14-alpine
    container_name: aura-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=aura
      - POSTGRES_PASSWORD=aura_pass
      - POSTGRES_DB=aura_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - aura-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aura"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Optional: Frontend (uncomment when ready)
  # frontend:
  #   build: ./frontend
  #   container_name: aura-frontend
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - REACT_APP_API_URL=http://localhost:8000
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   command: npm start
  #   depends_on:
  #     - backend
  #   networks:
  #     - aura-network

networks:
  aura-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  knowledge_data:
    driver: local