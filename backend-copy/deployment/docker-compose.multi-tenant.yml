"""
Docker Compose for Multi-Tenant Deployment
Each tenant gets isolated resources
"""

version: '3.8'

services:
  # Nginx reverse proxy for subdomain routing
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-multi-tenant.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend

  # Single backend serves all tenants (with isolation)
  backend:
    build: ./backend
    environment:
      - DATABASE_URL=postgresql://aura:password@postgres:5432/aura_multitenant
      - REDIS_URL=redis://redis:6379
      - MULTI_TENANT_MODE=true
    volumes:
      - tenant_data:/data/tenants  # Separate folders per tenant
    scale: 3  # Multiple instances for load balancing

  # Shared PostgreSQL with schema-per-tenant
  postgres:
    image: postgres:14
    environment:
      - POSTGRES_DB=aura_multitenant
      - POSTGRES_USER=aura
      - POSTGRES_PASSWORD=secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-multi-tenant.sql:/docker-entrypoint-initdb.d/init.sql

  # Shared Redis with key prefixing per tenant
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru

volumes:
  tenant_data:
    driver: local
  postgres_data:
    driver: local

# nginx-multi-tenant.conf
"""
Nginx configuration for subdomain-based tenant routing
Each client gets: clientname.aura-ai.com
"""

http {
    upstream backend {
        least_conn;
        server backend:8000 weight=1;
        server backend:8001 weight=1;
        server backend:8002 weight=1;
    }

    # Wildcard SSL for *.aura-ai.com
    ssl_certificate /etc/nginx/ssl/wildcard.aura-ai.com.crt;
    ssl_certificate_key /etc/nginx/ssl/wildcard.aura-ai.com.key;

    # Subdomain routing
    server {
        listen 443 ssl;
        server_name ~^(?<tenant>.+)\.aura-ai\.com$;

        location / {
            # Pass tenant ID in header
            proxy_set_header X-Tenant-ID $tenant;
            proxy_set_header Host $host;
            proxy_pass http://backend;
            
            # WebSocket support for continuous voice
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}

# deployment/kubernetes/tenant-deployment.yaml
"""
Kubernetes deployment for auto-scaling multi-tenant AURA
"""

apiVersion: apps/v1
kind: Deployment
metadata:
  name: aura-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: aura-backend
  template:
    metadata:
      labels:
        app: aura-backend
    spec:
      containers:
      - name: backend
        image: aura-ai/backend:latest
        env:
        - name: MULTI_TENANT_MODE
          value: "true"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: aura-secrets
              key: database-url
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: tenant-storage
          mountPath: /data/tenants
      volumes:
      - name: tenant-storage
        persistentVolumeClaim:
          claimName: tenant-data-pvc

---
# HPA for auto-scaling based on load
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: aura-backend-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: aura-backend
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70